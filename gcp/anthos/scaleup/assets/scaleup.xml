<?xml version="1.0" encoding="UTF-8"?><mxfile host="app.diagrams.net" modified="2021-07-30T16:04:24.340Z" agent="5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36" etag="XuXIVAD8qyl8E0PY-mQV" version="14.9.3" type="google"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="gldklE1JlKORj4DFRICe" name="Page-1">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</diagram></mxfile>